// https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_packaging
plugins {
    id 'java'
    // For source code formatting
    id "com.diffplug.spotless" version "6.25.0"
	// https://github.com/harbby/gradle-serviceloader
    id "com.github.harbby.gradle.serviceloader" version "1.1.8"
	// https://github.com/johnrengelman/shadow
	id 'com.github.johnrengelman.shadow' version '8.1.1'
    // Download task
    id "de.undercouch.download" version "5.6.0"
}

/**
 * Project Properties
 */
group = 'com.ortussolutions'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
	// Until BoxLang is published to Maven Central
	// Look for it in the local build directory
	// You must run `./gradle build -x test` in the BoxLang project
    compileOnly files( 'src/test/resources/libs/boxlang-1.0.0-all.jar' )
    implementation 'org.apache.derby:derby:10.16.1.1'

    // Testing Dependencies
	testImplementation files( 'src/test/resources/libs/boxlang-1.0.0-all.jar' )
    testImplementation "org.junit.jupiter:junit-jupiter:5.+"
	testImplementation "org.mockito:mockito-core:5.+"
	testImplementation "com.google.truth:truth:1.+"
}

java {
	// See: https://docs.gradle.org/current/userguide/toolchains.html#toolchains
    toolchain {
        languageVersion = JavaLanguageVersion.of( project.properties[ "jdkVersion" ] )
    }
	withJavadocJar()
    withSourcesJar()
}

compileJava {
	// Compiler Options
	options.incremental = true
	options.release = Integer.parseInt( project.properties[ "jdkVersion" ] )
	options.encoding = 'UTF-8'
	options.debug()
}

javadoc {
    // To avoid our own doclet issues
	options.addBooleanOption( "Xdoclint:none", true )
	//exclude '**/boxlang/parser/**'
	options.addBooleanOption( 'html5', true )
}
task zipJavadocs( type: Zip ) {
	group "documentation"
	from javadoc.destinationDir
	archiveFileName = "${project.name}-javadocs-${version}.zip"
	destinationDirectory = file( "$buildDir/distributions" )
	// Output that the docs have been zippped
	doLast {
		println "+ Javadocs have been zipped to the distribution folder"
	}
}
javadoc.finalizedBy( zipJavadocs )

/**
 * Docs are here:
 * - https://github.com/harbby/gradle-serviceloader,
 * - https://plugins.gradle.org/plugin/com.github.harbby.gradle.serviceloader
 * This generates the META-INF/services files for the ServiceLoader as part of the `build` task
 */
serviceLoader {
    serviceInterface 'ortus.boxlang.runtime.bifs.BIF'
    serviceInterface 'ortus.boxlang.runtime.components.Component'
    serviceInterface 'ortus.boxlang.runtime.async.tasks.IScheduler'
    serviceInterface 'ortus.boxlang.runtime.cache.providers.ICacheProvider'
	serviceInterface 'ortus.boxlang.runtime.events.IInterceptor'
}

jar {
    archiveVersion =  "${version}"
 	manifest {
	   attributes 'Description': 'ExampleBoxLangModule'
    }
}
shadowJar {
    mergeServiceFiles()
    destinationDirectory = file( "build/libs" )
}
build.finalizedBy( shadowJar )

/**
 * Custom task that creates a build/module folders
 * - Copies the build/libs/BoxLangModuleTemplate-1.0.0-all.jar to build/module/libs/BoxLangModuleTemplate-1.0.0-all.jar
 * - Copies the src/main/bx/** to build/module/ folder.
 */
task createModuleStructure(type: Copy) {
    from( 'build/libs' ) {
        include 'BoxLangModuleTemplate-1.0.0-all.jar'
        into 'build/module/libs'
    }
    from( 'src/main/bx' ) {
        include '**/*.bx'
        into 'build/module'
    }
    // Copy the root box.json file to the build/module folder
    from( '.' ) {
        include 'box.json'
        into 'build/module'
    }
    destinationDir = file( 'build/module' )
}
task zipModuleStructure( type: Zip ) {
    group "distribution"
    from createModuleStructure.destinationDir
    archiveFileName = "${project.name}-${version}.zip"
    destinationDirectory = file( "$buildDir/distributions" )
    // Output that the module has been zippped
    doLast {
        println "+ Module has been zipped to the distribution folder"
    }
}
createModuleStructure.finalizedBy( zipModuleStructure )
shadowJar.finalizedBy( createModuleStructure )

test {
    useJUnitPlatform()
    testLogging {
		showStandardStreams = true
	}
}

/**
 * TEMPORARY until we publish to maven
 * Task to download the latest jar from https://ortus-temp.s3.amazonaws.com/jericho/libs/boxlang-1.0.0-all.jar
 */
task downloadBoxLang( type: Download ) {
    // Configure the URL of the file to download
    src "https://ortus-temp.s3.amazonaws.com/jericho/libs/boxlang-${boxlangVersion}-all.jar"
    // Specify the destination directory for the downloaded file
    dest "src/test/resources/libs"
    overwrite true
    onlyIfModified true
}
