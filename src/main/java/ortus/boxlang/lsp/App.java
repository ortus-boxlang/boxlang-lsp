/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ortus.boxlang.lsp;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutionException;

import org.eclipse.lsp4j.jsonrpc.Launcher;
import org.eclipse.lsp4j.launch.LSPLauncher;
import org.eclipse.lsp4j.services.LanguageClient;
import org.eclipse.lsp4j.services.LanguageClientAware;

import ortus.boxlang.lsp.lint.DiagnosticRuleRegistry;
import ortus.boxlang.lsp.lint.LintConfigLoader;
import ortus.boxlang.lsp.lint.rules.UnscopedVariableRule;
import ortus.boxlang.lsp.lint.rules.UnusedVariableRule;
import ortus.boxlang.runtime.BoxRuntime;
import ortus.boxlang.runtime.logging.BoxLangLogger;
import ortus.boxlang.runtime.types.Struct;
import picocli.CommandLine;

public class App {

	public static BoxLangLogger logger;

	public static void main( String[] args ) {
		CLI cli = new CLI();
		new CommandLine( cli ).parseArgs( args );

		App app = new App();
		app.runUsingDebugServer( cli.debugServerPort );
	}

	public App() {
		BoxRuntime.getInstance();
		logger = BoxRuntime.getInstance().getLoggingService().getLogger( "lsp" );

		MemoryThresholdMonitor.startMemoryManagement();
		// Register diagnostic rules
		DiagnosticRuleRegistry.getInstance().register( new UnscopedVariableRule() );
		DiagnosticRuleRegistry.getInstance().register( new UnusedVariableRule() );
		BoxRuntime.getInstance().announce( "LSPRegisterVisitors", Struct.of( "sourceCodeVisitorService", SourceCodeVisitorService.getInstance() ) );
		startConfigWatcher();
	}

	private void startConfigWatcher() {
		var folders = ortus.boxlang.lsp.workspace.ProjectContextProvider.getInstance().getWorkspaceFolders();
		if ( folders == null || folders.isEmpty() ) {
			return;
		}
		new Thread( () -> {
			try {
				java.nio.file.Path			root	= java.nio.file.Path.of( new java.net.URI( folders.getFirst().getUri() ) );
				java.nio.file.Path			cfg		= root.resolve( ortus.boxlang.lsp.lint.LintConfigLoader.CONFIG_FILENAME );
				java.nio.file.WatchService	watcher	= root.getFileSystem().newWatchService();
				root.register( watcher, java.nio.file.StandardWatchEventKinds.ENTRY_CREATE, java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY,
				    java.nio.file.StandardWatchEventKinds.ENTRY_DELETE );
				while ( true ) {
					java.nio.file.WatchKey	key		= watcher.take();
					boolean					changed	= false;
					for ( var event : key.pollEvents() ) {
						java.nio.file.Path changedPath = root.resolve( ( java.nio.file.Path ) event.context() );
						if ( changedPath.equals( cfg ) ) {
							changed = true;
							break;
						}
					}
					key.reset();
					if ( changed ) {
						LintConfigLoader.invalidate();
						// Trigger re-publication of diagnostics on demand by clearing cache
						var provider = ortus.boxlang.lsp.workspace.ProjectContextProvider.getInstance();
						provider.getCachedDiagnosticReports().forEach( dr -> provider.remove( dr.getFileURI() ) );
					}
				}
			} catch ( Exception e ) {
				logger.warn( "Config watcher failure", e );
			}
		}, "boxlang-lsp-config-watcher" ).start();
	}

	private void runLSP( InputStream in, OutputStream out ) {
		LanguageServer				languageServer	= new LanguageServer();

		Launcher<LanguageClient>	launcher		= LSPLauncher.createServerLauncher(
		    languageServer,
		    in,
		    out );

		if ( languageServer instanceof LanguageClientAware ) {
			LanguageClient client = launcher.getRemoteProxy();
			languageServer.connect( client );
		}

		try {
			launcher.startListening().get();
		} catch ( InterruptedException e ) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch ( ExecutionException e ) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void runUsingSTDIn() {
		// System.out.println("Starting server over stdin");
		runLSP( System.in, System.out );
	}

	private void runUsingDebugServer( int port ) {
		System.out.println( "Starting debug server on port " + port );
		try ( ServerSocket socket = new ServerSocket( port, 50, InetAddress.getByName( "127.0.0.1" ) ) ) {
			if ( port == 0 ) {
				System.out.println( String.format( "Listening on port: %s", socket.getLocalPort() ) );
			}

			logger.info( String.format( "Listening on port: %s", socket.getLocalPort() ) );
			logger.info( String.format( "Bound on: %s", socket.getInetAddress() ) );

			while ( true ) {
				System.out.println( "waiting for a connection" );
				Socket connectionSocket = socket.accept();

				System.out.println( "Got a connection" );
				try {
					runLSP( connectionSocket.getInputStream(), connectionSocket.getOutputStream() );
				} finally {
					connectionSocket.close();
					System.out.println( "Closing debug connection" );
				}
			}
		} catch ( IOException e ) {
			e.printStackTrace();
		}
	}
}
