/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ortus.boxlang.lsp;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.lsp4j.DocumentSymbol;
import org.eclipse.lsp4j.Position;
import org.eclipse.lsp4j.Range;
import org.eclipse.lsp4j.SymbolInformation;
import org.eclipse.lsp4j.SymbolKind;
import org.eclipse.lsp4j.jsonrpc.messages.Either;

import ortus.boxlang.compiler.ast.BoxClass;
import ortus.boxlang.compiler.ast.BoxNode;
import ortus.boxlang.compiler.ast.expression.BoxAssignment;
import ortus.boxlang.compiler.ast.expression.BoxIdentifier;
import ortus.boxlang.compiler.ast.expression.BoxStringLiteral;
import ortus.boxlang.compiler.ast.statement.BoxAnnotation;
import ortus.boxlang.compiler.ast.statement.BoxFunctionDeclaration;
import ortus.boxlang.compiler.ast.statement.BoxProperty;
import ortus.boxlang.compiler.ast.visitor.VoidBoxVisitor;

public class DocumentSymbolBoxNodeVisitor extends VoidBoxVisitor {

	private List<Either<SymbolInformation, DocumentSymbol>>	documentSymbols	= new ArrayList<Either<SymbolInformation, DocumentSymbol>>();
	private List<DocumentSymbol>							symbolStack		= new ArrayList<DocumentSymbol>();
	private Path											filePath;

	public List<Either<SymbolInformation, DocumentSymbol>> getDocumentSymbols() {
		return documentSymbols;
	}

	public void setFilePath( Path filePath ) {
		this.filePath = filePath;
	}

	public void visit( BoxClass node ) {

		DocumentSymbol classSymbol = new DocumentSymbol();
		// find the class name
		classSymbol.setName( getClassName() );
		classSymbol.setKind( SymbolKind.Class );
		Range range = getRange( node );
		classSymbol.setRange( range );
		classSymbol.setSelectionRange( range );

		trackSymbol( classSymbol );
		classSymbol.setChildren( new ArrayList<DocumentSymbol>() );
		this.symbolStack.add( classSymbol );

		visitChildren( node );

		this.symbolStack.remove( symbolStack.size() - 1 );
	}

	public void visit( BoxProperty node ) {
		if ( !inClass() ) {
			visitChildren( node );
			return;
		}

		DocumentSymbol	property		= new DocumentSymbol();
		BoxAnnotation	nameAnnotation	= node.getAllAnnotations()
		    .stream()
		    .filter( annotation -> annotation.getKey().getValue().equalsIgnoreCase( "name" ) )
		    .findFirst()
		    .orElseGet( () -> node.getAllAnnotations().get( 0 ) );

		if ( nameAnnotation.getValue() == null ) {
			property.setName( nameAnnotation.getKey().getValue() );
		} else if ( nameAnnotation.getValue() instanceof BoxStringLiteral bsl ) {
			property.setName( bsl.getValue() );
		} else {
			property.setName( nameAnnotation.getValue().toString() );
		}
		property.setKind( SymbolKind.Field );

		Range r = getRange( node );
		property.setRange( r );
		property.setSelectionRange( r );

		trackSymbol( property );
		visitChildren( node );
	}

	public void visit( BoxFunctionDeclaration node ) {
		DocumentSymbol assignmentSymbol = new DocumentSymbol();

		assignmentSymbol.setKind( SymbolKind.Function );

		if ( this.inClass() ) {
			assignmentSymbol.setKind( SymbolKind.Method );
		}

		assignmentSymbol.setName( node.getName() );
		assignmentSymbol.setDetail( "any" );

		if ( node.getType() != null ) {
			assignmentSymbol.setDetail( node.getType().toString() );
		}

		Range range = getRange( node );
		assignmentSymbol.setRange( range );
		assignmentSymbol.setSelectionRange( range );

		trackSymbol( assignmentSymbol );
		visitChildren( node );
	}

	public void visit( BoxAssignment node ) {
		if ( ! ( node.getLeft() instanceof BoxIdentifier ) ) {
			visitChildren( node );
			return;
		}
		BoxIdentifier	id					= ( BoxIdentifier ) node.getLeft();
		DocumentSymbol	assignmentSymbol	= new DocumentSymbol();

		assignmentSymbol.setKind( SymbolKind.Variable );

		assignmentSymbol.setName( id.getName() );
		Range range = getRange( node );
		assignmentSymbol.setRange( range );
		assignmentSymbol.setSelectionRange( range );

		trackSymbol( assignmentSymbol );
		visitChildren( node );
	}

	private void trackSymbol( DocumentSymbol symbol ) {
		if ( symbolStack.size() > 0 ) {
			symbolStack.get( symbolStack.size() - 1 ).getChildren().add( symbol );
			return;
		}

		documentSymbols.add( Either.forRight( symbol ) );
	}

	private boolean inClass() {
		return symbolStack.size() > 0 && symbolStack.get( symbolStack.size() - 1 ).getKind() == SymbolKind.Class;
	}

	private Range getRange( BoxNode node ) {
		ortus.boxlang.compiler.ast.Position pos = node.getPosition();
		return new Range(
		    new Position( pos.getStart().getLine() - 1, pos.getStart().getColumn() ),
		    new Position( pos.getEnd().getLine() - 1, pos.getEnd().getColumn() ) );
	}

	private String getClassName() {
		if ( this.filePath == null ) {
			return "Class";
		}

		String path = this.filePath.getFileName().toString();

		if ( path.indexOf( "." ) > 0 ) {
			return path.substring( 0, path.lastIndexOf( "." ) );
		} else {
			return path;
		}
	}

	private void visitChildren( BoxNode node ) {
		for ( BoxNode child : node.getChildren() ) {
			child.accept( this );
		}
	}
}
