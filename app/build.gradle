/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id "application"
    id 'com.github.johnrengelman.shadow' version '8.1.1'

    // Download task
    id "de.undercouch.download" version "5.6.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

	// Until BoxLang is published to Maven Central
	// Look for it in the local build directory
	// You must run `./gradle build -x test` in the BoxLang project
	compileOnly files( '../boxlang/build/libs/boxlang-' + boxlangVersion + '-all.jar' )
    compileOnly files( 'src/test/resources/libs/boxlang-' + boxlangVersion + '-all.jar' )

    // Testing Dependencies
	testImplementation files( '../boxlang/build/libs/boxlang-' + boxlangVersion + '-all.jar'  )
	testImplementation files( 'src/test/resources/libs/boxlang-' + boxlangVersion + '-all.jar' )

    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.3")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:32.1.1-jre")

    // https://mvnrepository.com/artifact/org.eclipse.lsp4j/org.eclipse.lsp4j
    implementation "org.eclipse.lsp4j:org.eclipse.lsp4j:0.22.0"

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	implementation 'org.apache.commons:commons-lang3:3.14.0'

    // cli 
    implementation 'info.picocli:picocli:4.7.5'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("ortus.boxlanglsp.App")
}

jar {
    archiveBaseName = 'boxlang-lsp'
    archiveVersion =  "${version}"
	/**
	 *  The manifest for the shadowJar task is configured to inherit from the manifest of the standard jar task.
	 */
 	manifest {
       attributes 'Main-Class': 'ortus.boxlanglsp.App'
	   attributes 'Description': 'This is the Ortus BoxLang LSP'
    }
}
shadowJar {
	archiveBaseName = "boxlang-lsp"
}

/**
 * Test Task Customizations
 */
test {
	useJUnitPlatform()
	testLogging {
		showStandardStreams = true
	}
	// dependsOn compileJava, compileTestModule, compileTestJava
	// classpath += files( "./modules" )
	//exclude '**/resources/**'
}

// tasks.named<Test>("test") {
//     // Use JUnit Platform for unit tests.
//     useJUnitPlatform()
// }

task downloadBoxLang( type: Download ) {
	// Create the destination directory
	doFirst {
		file( "src/test/resources/libs" ).mkdirs()
	}
	// Configure the URLs of the files to download
	src([
		"https://downloads.ortussolutions.com/ortussolutions/boxlang/${boxlangVersion}/boxlang-${boxlangVersion}-all.jar"//,
		// "https://downloads.ortussolutions.com/ortussolutions/boxlang-runtimes/boxlang-web-support/${boxlangVersion}/boxlang-web-support-${boxlangVersion}.jar"
	])
	// Specify the destination directories for the downloaded files
	dest "src/test/resources/libs/"
    overwrite true
    onlyIfModified false
}

/**
 * Project Wide Helper function
 * This is not a task, but a reusable UDF
 */
project.ext.bumpVersion = { boolean major = false, boolean minor = false, boolean patch = false ->

	def propertiesFile = file( './gradle.properties' );
	def properties = new Properties();

	properties.load( propertiesFile.newDataInputStream() )
	def versionTarget = major ? 0 : minor ? 1 : 2

	def currentVersion = properties.getProperty( 'version' )
	def versionParts = currentVersion.split( '\\.' )
	def newPathVersion = versionParts[ versionTarget ].toInteger() + 1
	def newVersion = '';

	if( patch ){
		newVersion = "${versionParts[ 0 ]}.${versionParts[ 1 ]}.${newPathVersion}"
	} else if( minor ){
		newVersion = "${versionParts[ 0 ]}.${newPathVersion}.${versionParts[ 2 ]}"
	} else if( major ){
		newVersion = "${newPathVersion}.${versionParts[ 1 ]}.${versionParts[ 2 ]}"
	}

	properties.setProperty( 'version', newVersion )
	properties.store( propertiesFile.newWriter(), null )

	println "Bumped version from ${currentVersion} to ${newVersion}"
}

/**
 * Bump the major version number
 */
task bumpMajorVersion {
	doLast{
		bumpVersion( true )
	}
}

/**
 * Bump the minor version number
 */
task bumpMinorVersion {
	doLast{
		bumpVersion( false, true )
	}
}

/**
 * Bump the patch version number
 */
task bumpPatchVersion {
	doLast{
		bumpVersion( false, false, true )
	}
}
